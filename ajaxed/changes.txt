v 2.0
BUGFIX: ajaxed loading indicator stays fixed now even if there are scrollbars and you scroll.
BUGFIX: lib.range previously failed float tests are now running
BUGFIX: database tests used to run with the default DB if available.
BUGIFX: lib.throwError had a bug calling just QS but should call page.QS
BUGFIX: lib.detectComponent didnt work due to a wrong variable name
BUGFIX: str.format used to have a bug when arguments contained a placeholder string
- added error handling in db.insert and db.update to get more information about an error if one happens
- updated documentor:
	- code is syntax highlighted
	- support for lists added and code blocks (<code></code>) added, because docs looked a little messed up sometimes. 
		elements supporing lists and code blocks include:
		@CDESCRIPTION, @SDESCRIPTION, @DESCRIPTION, @PARAM, @RETURN and public properties.
		A list item must be on one line, and start with "- "
		- Code examples are now better to read within the documentation
	- due to this change some docs have been updated for better readability
	- removed the class path in the documentation. it made no real sense to display this. 
	- default methods has not been supported yet. are marked in "italic" now
	- BUGFIX: methods, properties, etc where case sensitive and it didnt recognize e.g. "Public Function" or "pUblic Property"
	- BUGFIX: byVal parameters have been not correctly detected.
	- removes square brackets on a methodname (reserved words)
	- parameter lists have a "," now between every parameter
	- use <em></em> to emphasize code words (e.g. methodnames, etc.). EMPTY is emphasized automatically
	- @ALIAS keyword added for methods.
	- options are detected in the documentation
- added db.getRS() and db.getUnlockedRS(). those should be used instead of db.getRecordset and db.getUnlockedRecordset
	because they can be used with parameters which will be sql-safe. e.g. db.getRS("SELECT * FROM user WHERE id = {0}", 1)
- added some more error checks to the db class
- added a Logger class which allows you to log all kind of things on 4 levels (debug, info, warn and error)
	- by default dev env logs till level debug (as a result all levels) and live env only till error level
	- logging comes with ASCII coloring which makes reading the logs easier
	- lib.logger holds a ready-to-use instance .. debug with lib.logger.debug("some message")
	- console has logging management
	- ajaxed logs some useful information by default as debug. e.g. all page requests and database accesses are logged. Nice thing: every class logs in its own color - to outline the different components
	- also warnings about e.g. obsolete methods are performed
	- supports also non ascii chars.
- code-consoles in the console scroll from top to down now. this is more logic ;)
	- console has a favicon
- updated str.isValidEmail() pattern to match all emails
- TestFixture
	- assertInFile() and assertNotInFile added
	- assertResponse() added. with this its possible now to write tests which check if pages actually respond and work
	- asserts can be failed manually now by using fail() method
	- info() method added. 
- str.rReplace added => performs a quick regex replace on a given string
- str.format is simpler to use when having one placeholder
	- instead of str.format("one {0}", array(1)) we can use str.format("one {0}", 1)
- added a StringBuilder component which speeds up the common string concatenation.
	- uses either a .net stringbuilder or a custom VB StringBuilder (if installed)
	- is loaded by default and can be used e.g. ...
	set output = new StringBuilder
	output("test")
- its possible to override config vars for each environment.
	- place a evnDEV() and/or envLIVE() sub into config.asp and override the wanted config vars
	- each var which should be overriden must be configured globally first otherwise it wont be recognized
- database class
	- tested databases microsoft access, sqlite and ms sql server
	- dbType added which tells us which database we are using
	- trims all text field columns on insert() and update() to the length which is maximum allowed for the column => no error happens anymore because a field is too long
	- added insertOrUpdate()
	- update() is also doing batch updating now and return the number of updated records
- added a lib.require method which allows us to do a check if a given class has been included. if not a friendly error is shown
- friendly error raised when ajaxed.callback is used but no callback() is defined on server side
- ajaxed.callback supports page-parts now:
	- it possible get page content back on callback and update a container with it.
	example: lets say we have a DIV container with ID 'c' and want to load some html from the server into it
	this is also possible now with ajaxed.callback:
	e.g. ajaxed.callback('partname', 'c') will load a sub called "pagePart_partname()" and put its content
	into the element with the ID 'c'. if no sub found with that name then it acts like a normal callback.
- added a Dropdown control. 
	- uses stringbuilder. can output directly or to a string
	- different multiple types (checkboxes, radiobuttons)
	- different datasources 
- str.HTMLEncode() is now a default function so its quicker to use in your views. use it to prevent XSS attacks!
- str.humanize() added. it makes "computer" strings more "human" readable
- Validator class added. It helps validating business objects!
- AjaxedPage.RFA() method added. It gets arrays from the request.form collection
- logger deactivated by default
- JSON:
	- BUGFIX: if a dictionary contains no items then "null" is returned. used to return nothing (this is wrong according to JSONs RFC).
	- BUGFIX: supports all unicode chars now (using ascw() function instead of asc()). Chinese, etc. works fine now!!
	- recordsetPaging property added
	- updated documentation
	- toJSON() has been defined as default method. thus generation is possible with (new JSON)("some value")
	- standalone test(s) added
	- supports request object now (includes IStringList and IRequestDictionary support). exposes session, form, querystring, etc.
- DataContainer class added
	- provides an abstract utility to manipulate data. supports recordset, array and dictionary
	- lib.contains() is obsolete as it has been moved to DataContainer
	- paginate() can be used to paginate data
- Localization class introduced
	- available with 'local' instance
	- str.parse() parses float number with the comma according to the local settings 
- added str.writef() function which is a combination of write() and format()
- AjaxedPage.headerFooter property introduced to allow adding custom headers.
- added lib.requestURL() to easily request urls with IServerXMLHTTPRequest
- added AjaxedPage.QFP() and AjaxedPage.RFP() methods to get values and parse them in on go.
- added lib.arrayize() which ensures a value to be an array.
	- alias: []
- introduced optionsHash which can be seen as an own ajaxed datatype.
	- can be created using lib.options or ["O"] function
- lib.newDict() got an alias ["D"] => create dictionaries only with: set d = ["D"](empty)

v 1.0

- ajaxedPage has a plain- and title-property
- moved configuration to /ajaxedConfig ... this makes the updating process easier
	- you need to create a folder called "ajaxedConfig" and move the config.asp from "ajaxed" folder to there
	- moreover put a header.asp and footer.asp into the ajaxedConfig folder as well
- footer and header added
	- footer.asp and header.asp can be found in "ajaxedConfig". Modify them as you wish
- ajaxedPage.defaultStructure property added. With this its possible to load a page with a default header and footer. thus they are not loaded from the ajaxedConfig then
	- this is here if you need a valid HTML document but dont really care about the nitty gritty stuff.
- MD5 hash class added
- lib.fso property added. for quick access to the filesystemobject
- lib.getFunction() gives the possibility to get a function by name and the possibility to check if it exists
- lib.exec() function added. with this you can call a function if it exists. if not then its not called
	- good usage is e.g. in the header.asp when you want to execute something within the head-tag on some pages
	- the init() sub does not necessarily need to be included. just leave it if you dont use it
- str.parse returns a string if alternative type is a string .. before it throwed exception
- str.matching for quick execution of regex
- implemented environments support. lib.env returns the current environment. LIVE is production and DEV is development
	- by default its always development
	- AJAXED_ENVIRONMENT can be set in the config.asp
	- lib.DEV and lib.LIVE are helpers to indicate the environment
	- ajaxedPage.onlyDev property can protect pages against being available on the live environment
	- tests cannot be run by default on the live environment (security reason)
	- if you run /test/ then it looks for tests everywhere on the server. testfiles must start with "test_" and have the extension .asp
- TestFixture class added. Its possible to write tests now. Tests for the library are available and you can write your own for your applications
	- Fixture is implemented as other common fixtures on the market
- Cache class added. With it you can cache data which is "expensive" to get. see webdevbros.net for a tutorial about it.
- error is now thrown if there is no main() sub in the page. 
- created an own ajaxed console which is a place for tools for the developer
	- available through /ajaxed/console/ and only on the DEV environment.
	- contains a regular expression tool
	- contains the documentor which creates documentation for VBScript classes
- documentation works now in FF and IE. formatting has been updated a bit. and printing is nicer as well
- db.insert, db.update, db.count, db.delete, db.toggle added
	- makes code nicer and quick CRUD operations easier
- added TextTemplate component. It parses templates. Useful for sending emails (email component will follow)
	- templates can be managed withing the ajaxed console as well.
- lib.contains added. checks if a given value exists in an array or dictionary
- lib.detectComponents added. helps to detect which third party components are installed on the server
- RSS component added.
- version check implemented within the console. users are notified about new versions.

v 0.3

[18 December, 2007]
- working with prototype 1.6
- working with JSON utility class 1.4
	- there used to be an error when returning custom objects which were processed recursively. it resulted in outputing only '}'
	- vartype = 19 is undocumented but comes as integer from mysql. this vartype is treated as integer now
	- vartype 7 added which was not recognized as float
- loading indicator has no styles applied anymore.. they need to be defined by you in your css file by definined the css class 'ajaxLoadingIndicator'
	if you want back the old style, then put this into your global stylesheet
		.ajaxLoadingIndicator {
			background-color: #cc0000;
			color: #fff;
			margin:2px;
			right: 0px;
		}
- more test have been added (also for recordsets)
- added AJAXED_DBCONNECTION to the config.asp => you can open the DB connection automatically now for each page by default
- loading indicator stays now always on top of the screen. before it used to disappear if page scroll was not at the top
- renamed demo/index.asp to demo/default.asp because iis default installation has this already set

v 0.2

[8 July, 2007]
- added a "Database" class which offers functionality to work with databases.
- prototypejs: using version 1.5.1.1 instead of 1.5.1_rc1 now
- AjaxedPage.iif, AjaxedPage.error, AjaxedPage.throwError are obsolete and use the appropriate library methods now.
- added a "library" class which holds "global" and general functions which are needed through the whole library. check the documentation for new functions
- added a "stringOperations" class which adds a lot of additional and useful string manipulation functions to the library
- created a "test" folder which holds unit tests for the library.
- created a folder "prototypejs" and moved the prototype JavaScript library there
- created a folder for each VBScript class (class_ajaxedPage, class_JSON). Prefixed the folder with "class_"

v 0.1

initial release